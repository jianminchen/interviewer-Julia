# 
# Say you have an array for which the ith element is the price of a given stock on day i.
# 
# Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
# 
# Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
# 
# Example 1:
# 
# Input: [7,1,5,3,6,4]
# Output: 7
# Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
#              Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
# Example 2:
# 
# Input: [1,2,3,4,5]
# Output: 4
# Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
#              Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
#              engaging multiple transactions at the same time. You must sell before buying again.
# Example 3:
# 
# Input: [7,6,4,3,1]
# Output: 0
# Explanation: In this case, no transaction is done, i.e. max profit = 0.
# 
# [7, 1, 2, 5, 4, 3, 6, 4, 2] p=0 min 3 max 6 p += 5-1=4 + (6-3) = 7

# explain to how to get maximum profit:
    

def max_profit(price_list):
    '''
    input: price list
    return: sum of profits
    '''
    """
    check if input correct type
    """
    if not price_list:
        return 0
    profit = 0
    flag = 0
    min_price = price_list[0]
    max_price = 0
    for price in price_list:
        # find min_price if statement
        if price <= min_price and not flag:
            min_price = price
            continue
        # find max_price if statement
        if price > max_price:            
            max_price = price
            flag = 1
            continue
            
        # we have min and max, find profit
        profit += (max_price - min_price)
        # restart reset flag, min and maxt like lines 43-45
        flag = 0
        min_price = price
        max_price = 0
    if max_price > 0:
        profit += (max_price - min_price)
    return profit

price_list = []
print(max_profit(price_list))


Julia shared the solution and compared the solution to the interviewee:

https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solution/
    
    
    class Solution {
    public int maxProfit(int[] prices) {
        int i = 0;
        int valley = prices[0];
        int peak = prices[0];
        int maxprofit = 0;
        while (i < prices.length - 1) {
            while (i < prices.length - 1 && prices[i] >= prices[i + 1])
                i++;
            valley = prices[i];
            while (i < prices.length - 1 && prices[i] <= prices[i + 1])
                i++;
            peak = prices[i];
            maxprofit += peak - valley;
        }
        return maxprofit;
    }
}